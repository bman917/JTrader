/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jchan.jtrader.ui;

import com.jchan.jtrader.JTraderDatabaseSv;
import com.jchan.jtrader.Logger;
import com.jchan.jtrader.Util;
import com.jchan.jtrader.model.Stock;
import com.jchan.jtrader.model.StockStats;
import com.jchan.jtrader.pse.JTraderPSE;
import java.math.BigDecimal;
import java.util.ServiceLoader;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressRunnable;
import org.netbeans.api.progress.ProgressUtils;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.jchan.jtrader.ui//StockStats//EN",
autostore = false)
@TopComponent.Description(preferredID = "StockStatsTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "com.jchan.jtrader.ui.StockStatsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_StockStatsAction",
preferredID = "StockStatsTopComponent")
public final class StockStatsTopComponent extends TopComponent implements StatsListener {

    private static JTraderDatabaseSv sv = ServiceLoader.load(JTraderDatabaseSv.class).iterator().next();

    public StockStatsTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(StockStatsTopComponent.class, "CTL_StockStatsTopComponent"));
        setToolTipText(NbBundle.getMessage(StockStatsTopComponent.class, "HINT_StockStatsTopComponent"));
        StatsService.addListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new java.awt.Button();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelStock = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelVolume = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelAveBuy = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelAveSell = new javax.swing.JLabel();
        jLabelMarketPrice = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabelCurrentGain = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabelOverAllGain = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButtonImportMarketPriceFromPSE = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonManualUpdate = new javax.swing.JButton();

        button1.setLabel(org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.button1.label")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel1.text")); // NOI18N

        jLabelStock.setFont(new java.awt.Font("Tahoma", 1, 14));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelStock, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabelStock.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel3.text")); // NOI18N

        jLabelVolume.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelVolume, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabelVolume.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel5.text")); // NOI18N

        jLabelAveBuy.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelAveBuy, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabelAveBuy.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel7.text")); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel8.text")); // NOI18N

        jLabelAveSell.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelAveSell, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabelAveSell.text")); // NOI18N

        jLabelMarketPrice.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelMarketPrice, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabelMarketPrice.text")); // NOI18N

        jLabelCurrentGain.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelCurrentGain, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabelCurrentGain.text")); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel9.text")); // NOI18N

        jLabelOverAllGain.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelOverAllGain, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabelOverAllGain.text")); // NOI18N

        jLabel10.setFont(new java.awt.Font("Arial", 0, 11));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButtonImportMarketPriceFromPSE, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jButtonImportMarketPriceFromPSE.text")); // NOI18N
        jButtonImportMarketPriceFromPSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportMarketPriceFromPSEActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButtonManualUpdate, org.openide.util.NbBundle.getMessage(StockStatsTopComponent.class, "StockStatsTopComponent.jButtonManualUpdate.text")); // NOI18N
        jButtonManualUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManualUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelStock))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelMarketPrice))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelVolume))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelAveBuy))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelAveSell))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelOverAllGain))
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelCurrentGain))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButtonManualUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonImportMarketPriceFromPSE, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelStock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMarketPrice)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelVolume))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabelCurrentGain))
                .addGap(64, 64, 64)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabelAveBuy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabelAveSell))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabelOverAllGain))
                .addGap(24, 24, 24)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportMarketPriceFromPSE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonManualUpdate)
                .addGap(65, 65, 65))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImportMarketPriceFromPSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportMarketPriceFromPSEActionPerformed

        ProgressRunnable<String> progressRunnable = new ProgressRunnable<String>() {

            @Override
            public String run(ProgressHandle ph) {
                try {
                    ph.switchToDeterminate(100);
                    BigDecimal bigDecimal;

                    bigDecimal = JTraderPSE.getStockQuote(currentStock, ph);

                    ph.progress("Updating Stock Information on JTrader Database.", 90);
                    Stock stock = sv.getStock(currentStock);
                    stock.setMarketValue(bigDecimal);
                    sv.updateStock(stock);
                    ph.finish();
                    StatsService.updateStats(currentStock);
                    return "Finshed. PSE Market Price for " + stock.getCode() + " is " + stock.getMarketValue();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                    return ex.toString();
                }
            }
        };

        String result = ProgressUtils.showProgressDialogAndRun(progressRunnable, "Import Market Price from PSE", true);
        /*
        NotifyDescriptor nd = new NotifyDescriptor.Message(result, NotifyDescriptor.PLAIN_MESSAGE);
        DialogDisplayer.getDefault().notify(nd);
         */
}//GEN-LAST:event_jButtonImportMarketPriceFromPSEActionPerformed

    private void jButtonManualUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManualUpdateActionPerformed
        NotifyDescriptor.InputLine nd = new NotifyDescriptor.InputLine("Market Price for " + currentStock, "Update Market Price");
        DialogDisplayer.getDefault().notify(nd);
        String price = nd.getInputText();

        if (currentStock != null && price != null && price.trim().length() > 0) {

            Logger.getInstance().debug("Updating " + currentStock + " with Market Price: " + price);
            Stock stock = sv.getStock(currentStock);
            stock.setMarketValue(new BigDecimal(price));
            sv.updateStock(stock);

            Logger.getInstance().debug("Updating " + currentStock + " with Market Price: " + price + " - Successful");
            StatsService.updateStats(currentStock);
        }
    }//GEN-LAST:event_jButtonManualUpdateActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private javax.swing.JButton jButtonImportMarketPriceFromPSE;
    private javax.swing.JButton jButtonManualUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAveBuy;
    private javax.swing.JLabel jLabelAveSell;
    private javax.swing.JLabel jLabelCurrentGain;
    private javax.swing.JLabel jLabelMarketPrice;
    private javax.swing.JLabel jLabelOverAllGain;
    private javax.swing.JLabel jLabelStock;
    private javax.swing.JLabel jLabelVolume;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void updateStats(String stockCode) {
        if (stockCode != null && stockCode.trim().length() > 0) {

            StockStats stats = StockStats.getStats(stockCode);
            stats.calculateStats(stockCode);

            int volume = stats.getVolumeInHand();
            BigDecimal price = sv.getAvePrice(stockCode);
            BigDecimal buyAve = stats.getAveBuyPrice();
            BigDecimal sellAve = stats.getAveSellPrice();


            currentStock = stockCode;

            this.jLabelStock.setText(stockCode);

            this.jLabelVolume.setText(String.valueOf(volume));
            this.jLabelMarketPrice.setText(String.valueOf(stats.getMarketValue()));
            this.jLabelAveBuy.setText(String.valueOf(buyAve));
            this.jLabelAveSell.setText(String.valueOf(sellAve));

            this.jLabelOverAllGain.setText(String.valueOf(stats.getOverAllGain()));

            this.jLabelCurrentGain.setText(String.valueOf(stats.getCurrentNetPrice()));
        }
    }
    private String currentStock;
}
